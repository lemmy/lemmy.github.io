<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>l e m m s t e r . d e - TLA+</title><link href="http://www.lemmster.de/" rel="alternate"></link><link href="http://www.lemmster.de/feeds/tla.atom.xml" rel="self"></link><id>http://www.lemmster.de/</id><updated>2019-05-14T09:43:02+02:00</updated><entry><title>[](BeSuspiciousOfSuccess) a.k.a. a review of "Modeling Adversaries with TLA+"</title><link href="http://www.lemmster.de/tla-liveness-review.html" rel="alternate"></link><published>2019-05-14T09:43:02+02:00</published><updated>2019-05-14T09:43:02+02:00</updated><author><name>Markus A. Kuppe</name></author><id>tag:www.lemmster.de,2019-05-14:/tla-liveness-review.html</id><summary type="html">&lt;p&gt;Hillel Wayne recently published a blog post titled "&lt;a href="https://www.hillelwayne.com/post/adversaries/"&gt;Modeling Adversaries with TLA+&lt;/a&gt;". The post does a &lt;a href="https://twitter.com/lemmster/status/1125423627904544768"&gt;good job&lt;/a&gt; showing how adversaries and environmental effects can be modeled in TLA&lt;sup&gt;+&lt;/sup&gt;. The post is also subtly incorrect when it comes to two of the liveness properties. In other words, "Modeling Adversaries with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hillel Wayne recently published a blog post titled "&lt;a href="https://www.hillelwayne.com/post/adversaries/"&gt;Modeling Adversaries with TLA+&lt;/a&gt;". The post does a &lt;a href="https://twitter.com/lemmster/status/1125423627904544768"&gt;good job&lt;/a&gt; showing how adversaries and environmental effects can be modeled in TLA&lt;sup&gt;+&lt;/sup&gt;. The post is also subtly incorrect when it comes to two of the liveness properties. In other words, "Modeling Adversaries with TLA+" not only shows how to model adversaries but also comes with a spec to discuss the intricacies of temporal logic. :-)&lt;/p&gt;
&lt;p&gt;Before we get started, let me make clear that the spec indeed satisfies all of the properties described in prose. The error is that some of the specified properties do not match their description but are instead trivially true. This is why Lamport - in e.g. the &lt;a href="https://lamport.azurewebsites.net/video/video5.html"&gt;TLA&lt;sup&gt;+&lt;/sup&gt; video lecture #5&lt;/a&gt; - cautions us to "Always be suspicious of success". Reasoning about liveness is &lt;a href="https://pron.github.io/posts/tlaplus_part3#a-bit-of-historical-background"&gt;delicate business&lt;/a&gt; and easy to get wrong.&lt;/p&gt;
&lt;p&gt;To quickly recap, the spec models a system that converges to a set of goal states (&lt;code&gt;x \in Goal&lt;/code&gt;) and an environment &lt;code&gt;World&lt;/code&gt; that perturbs the system by knocking it out of the goal states. Below is a slightly simplified excerpt of the original spec:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;VARIABLES&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="n"&gt;TotalInterval&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;Goal&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;TypeInvariant&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;

&lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;

&lt;span class="n"&gt;Machine&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="k k-Conditional"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="k k-Conditional"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; = x + 1 ELSE x&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;World&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;

&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Machine&lt;/span&gt; &lt;span class="o"&gt;\/&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;

&lt;span class="n"&gt;Spec&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;WF_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Machine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Several invariants and liveness properties are discussed that are satisfied by &lt;code&gt;Spec&lt;/code&gt;. Two properties however are incorrect; &lt;code&gt;FiniteWorldStable&lt;/code&gt; and &lt;code&gt;RareWorldResilient&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;FiniteWorldStable&lt;/h2&gt;
&lt;p&gt;The comment for the &lt;code&gt;FiniteWorldStable&lt;/code&gt; property says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] If the world is only kicking things out of alignment a finite number of times, say one million, then it should still be stable. My argument is that after the millionth kick, we're now somewhere in TotalInterval and the spec is equivalent to one without the World. We can represent “finite World actions” by saying “it's not always eventually the case that World happens”, which we'd write in TLA+ as &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;World&amp;gt;&amp;gt;_x&lt;/code&gt;. Here the &amp;lt;&amp;lt;&amp;gt;&amp;gt; means “an action that changes x”, not sequence.&lt;/p&gt;
&lt;p&gt;While Stable still doesn't hold, FiniteWorldStable does.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is translated into the following TLA&lt;sup&gt;+&lt;/sup&gt; property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Safe&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;Goal&lt;/span&gt;
&lt;span class="n"&gt;Stable&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Safe&lt;/span&gt;

&lt;span class="n"&gt;FiniteWorldStable&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Stable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reasoning in the comment is correct. Checking &lt;code&gt;FiniteWorldStable&lt;/code&gt; with TLC confirms that the property holds. Being suspicious of success though, let us alter &lt;code&gt;FiniteWorldStable&lt;/code&gt; to &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;World&amp;gt;&amp;gt;_x =&amp;gt; ~&amp;lt;&amp;gt;[](x \in Goal)&lt;/code&gt;; we negated the &lt;a href="https://en.wikipedia.org/wiki/Truth_table#Logical_implication"&gt;implication's&lt;/a&gt; consequent &lt;code&gt;Stable&lt;/code&gt;. Unfortunately, this also holds! Even substituting the consequent with &lt;code&gt;23=42 /\ 23#42&lt;/code&gt; holds. The reason is that &lt;code&gt;Spec =&amp;gt; FiniteWorldStable&lt;/code&gt; is &lt;a href="https://en.wikipedia.org/wiki/Vacuous_truth#Scope_of_the_concept"&gt;vacuously true&lt;/a&gt;. We will discuss why it is vacuously true later. First we will shift our attention to &lt;code&gt;RareWorldResilient&lt;/code&gt;:&lt;/p&gt;
&lt;h2&gt;RareWorldResilient&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] to get resilience we don't need to require World to only happen finite times. Instead, we only need to guarantee it happens finite times while we're out of equilibrium. If eventually the world only kicks x out of Goal when it's already in Goal, then we're giving our machine enough time to return x to Goal and we have resilience.&lt;/p&gt;
&lt;p&gt;Another way of looking at it: if World happens rarely enough, say one-tenth as often as Machine, then we'll return to Goal before the next World action pushes us out again.&lt;/p&gt;
&lt;p&gt;This property holds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is translated into &lt;code&gt;RareWorldResilient&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Resilient&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Safe&lt;/span&gt;
&lt;span class="n"&gt;RareWorldResilient&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;World&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Safe&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Resilient&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As with &lt;code&gt;FiniteWorldStable&lt;/code&gt; above, the prose is convincing and TLC once again confirms that &lt;code&gt;RareWorldResilient&lt;/code&gt; holds. But as we have now learned, implication can be tricky. Let us try and replace the consequent of the inner implication: &lt;code&gt;&amp;lt;&amp;gt;[][World =&amp;gt; 23 # 42]_x =&amp;gt; Resilient&lt;/code&gt;. Checking the modified property with TLC should make us suspicious.&lt;/p&gt;
&lt;h2&gt;What is the problem?&lt;/h2&gt;
&lt;p&gt;At this point we will zoom out and discuss the underlying problem. For that we will first need Lamport's (&lt;a href="https://lamport.azurewebsites.net/pubs/lamport-actions.pdf"&gt;see "The Temporal Logic of Actions" (section 4.1)&lt;/a&gt;) definition of what an &lt;em&gt;action-step&lt;/em&gt; is. Let &lt;code&gt;s,t&lt;/code&gt; be a pair of states (a state &lt;code&gt;s&lt;/code&gt; and its successor state &lt;code&gt;t&lt;/code&gt; such as &lt;code&gt;x=8,x=7&lt;/code&gt;). The pair &lt;code&gt;s,t&lt;/code&gt; is a &lt;code&gt;World&lt;/code&gt; step iff &lt;code&gt;s[[World]]t&lt;/code&gt; equals true. We obtain &lt;code&gt;s[[World]]t&lt;/code&gt; by replacing each unprimed variable &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;World&lt;/code&gt; with the value of &lt;code&gt;x&lt;/code&gt; in state &lt;code&gt;s&lt;/code&gt; and each primed occurrence of the variable &lt;code&gt;x&lt;/code&gt; with the value of &lt;code&gt;x&lt;/code&gt; in the successor state &lt;code&gt;t&lt;/code&gt;. For example, the pair &lt;code&gt;x=8,x=7&lt;/code&gt; is a &lt;code&gt;World&lt;/code&gt; step because &lt;code&gt;7 \in TotalInterval&lt;/code&gt; equals true. However, the same argument applies to &lt;code&gt;s[[Machine]]t&lt;/code&gt;  because &lt;code&gt;7 = 8 - 1&lt;/code&gt;. Thus, the pair &lt;code&gt;x=8,x=7&lt;/code&gt; is both a &lt;code&gt;World&lt;/code&gt; and a &lt;code&gt;Machine&lt;/code&gt; step. The pair &lt;code&gt;x=8,x=7&lt;/code&gt; is not the only pair which is a &lt;code&gt;World&lt;/code&gt; and &lt;code&gt;Machine&lt;/code&gt; step. Due to the definitions of the &lt;code&gt;World&lt;/code&gt; and &lt;code&gt;Machine&lt;/code&gt; actions, the spec implies that any &lt;code&gt;Machine&lt;/code&gt; step is also a &lt;code&gt;World&lt;/code&gt; step (but not vice versa)! The only behaviors satisfying the spec and the property &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;World&amp;gt;&amp;gt;_x&lt;/code&gt; are ones with a (finite) prefix of &lt;code&gt;World&lt;/code&gt; steps followed by infinite stuttering. The spec's &lt;em&gt;fairness&lt;/em&gt; conjunct &lt;code&gt;WF_x(Machine)&lt;/code&gt; however, asserts that there are infinitely many (non-stuttering) &lt;code&gt;Machine&lt;/code&gt; steps. Thus &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;World&amp;gt;&amp;gt;_x&lt;/code&gt; never holds and &lt;code&gt;Spec =&amp;gt; FiniteWorldStable&lt;/code&gt; is vacuously true.&lt;/p&gt;
&lt;p&gt;To approach this from a different angle, we will substitute for the identifier &lt;code&gt;World&lt;/code&gt; its definition &lt;code&gt;x' \in TotalInterval&lt;/code&gt; in &lt;code&gt;FiniteWorldStable&lt;/code&gt; to obtain &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;x' \in TotalInterval&amp;gt;&amp;gt;_x =&amp;gt; Stable&lt;/code&gt;. This immediately looks funny. But can we verify it too? We can use TLC to verify that &lt;code&gt;[][x' \in TotalInterval]_x&lt;/code&gt; (always) holds for all behaviors of spec (the type invariant &lt;code&gt;TypeInvariant&lt;/code&gt; confirms it too) and therefore &lt;code&gt;~[]&amp;lt;&amp;gt;&amp;lt;&amp;lt;x' \in TotalInterval&amp;gt;&amp;gt;_x&lt;/code&gt; has to be always false. To repeat, all steps of all behaviors satisfying &lt;code&gt;Spec&lt;/code&gt; are always &lt;code&gt;World&lt;/code&gt; steps regardless of whether a step "occurred" by taking a &lt;code&gt;Machine&lt;/code&gt; or &lt;code&gt;World&lt;/code&gt; &lt;em&gt;action&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;RareWorldResilient&lt;/code&gt; suffers from the same flaw. By replacing &lt;code&gt;World&lt;/code&gt; with its definition we obtain &lt;code&gt;&amp;lt;&amp;gt;[](x' \in TotalInterval =&amp;gt; Safe]_x =&amp;gt; []&amp;lt;&amp;gt;Safe&lt;/code&gt;. By what we discussed in the previous paragraph, &lt;code&gt;RareWorldResilient&lt;/code&gt; thus equals &lt;code&gt;&amp;lt;&amp;gt;[][TRUE =&amp;gt; Safe]_x =&amp;gt; []&amp;lt;&amp;gt;Safe&lt;/code&gt; which can be reduced to &lt;code&gt;&amp;lt;&amp;gt;[][Safe]_x =&amp;gt; []&amp;lt;&amp;gt;Safe&lt;/code&gt;. The formula &lt;code&gt;&amp;lt;&amp;gt;[]P =&amp;gt; []&amp;lt;&amp;gt;P&lt;/code&gt; is a tautology in temporal logic. Semantically, if &lt;code&gt;Safe&lt;/code&gt; is eventually always true - in any behavior of &lt;code&gt;Spec&lt;/code&gt; - then it follows that &lt;code&gt;Safe&lt;/code&gt; is also repeatedly true.&lt;/p&gt;
&lt;p&gt;How can we address this problem? We somehow have to make sure that &lt;code&gt;Spec&lt;/code&gt; no longer implies that &lt;code&gt;Machine&lt;/code&gt; steps are also &lt;code&gt;World&lt;/code&gt; steps.&lt;/p&gt;
&lt;h2&gt;How do we fix this?&lt;/h2&gt;
&lt;p&gt;One approach would be to modify the definition of &lt;code&gt;World&lt;/code&gt; to &lt;code&gt;x' \in (TotalInterval \ Goal)&lt;/code&gt;. This causes &lt;code&gt;Machine&lt;/code&gt; steps in the &lt;code&gt;Goal&lt;/code&gt; set to not be &lt;code&gt;World&lt;/code&gt; steps. For example &lt;code&gt;x=2,x=3&lt;/code&gt; would be a &lt;code&gt;Machine&lt;/code&gt; but not a &lt;code&gt;World&lt;/code&gt; step. We can verify this by checking that &lt;code&gt;[][World]_x&lt;/code&gt; is violated.&lt;/p&gt;
&lt;p&gt;Unfortunately, this approach has drawbacks: The original definition of &lt;code&gt;World&lt;/code&gt; allows for behaviors (satisfying the spec) where the variable &lt;code&gt;x&lt;/code&gt; non-deterministically changes in the &lt;code&gt;Goal&lt;/code&gt; interval. Especially it allows behaviors with e.g. a &lt;code&gt;World&lt;/code&gt; step such as &lt;code&gt;x=3,x=2&lt;/code&gt;(all &lt;code&gt;Machine&lt;/code&gt; steps are &lt;code&gt;World&lt;/code&gt; steps but not vice versa). Semantically this models an adversary/environment that perturbs our &lt;code&gt;Machine&lt;/code&gt; but that we define to "play by the rules" in certain states. This is upside down because we want to make as few assumptions about the adversary as possible. On a tangent, we could even argue that &lt;code&gt;x' \in TotalInterval&lt;/code&gt; should be broadened to &lt;code&gt;x' \in Nat&lt;/code&gt; to model all (type-correct) values and - for model checking - be redefined with a &lt;em&gt;Definition Override&lt;/em&gt; to a &lt;em&gt;finite&lt;/em&gt; set of e.g. &lt;code&gt;0..6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a more subtly problem with changing the &lt;code&gt;World&lt;/code&gt; action though. Let us use TLC to generate all steps of &lt;code&gt;Spec&lt;/code&gt; that are not &lt;code&gt;World&lt;/code&gt; steps. We again check the property &lt;code&gt;[][World]_x&lt;/code&gt; but in order for TLC to print &lt;em&gt;all&lt;/em&gt; violations (which correspond to the steps we are interested in), we use the &lt;a href="https://lamport.azurewebsites.net/tla/tlc-options.html?back-link=tools.html"&gt;-continue parameter&lt;/a&gt;[^1]. TLC reports the following five violations:&lt;/p&gt;
&lt;ol type="A"&gt;
  &lt;li&gt;x=2,x=3&lt;/li&gt;
  &lt;li&gt;x=3,x=2&lt;/li&gt;
  &lt;li&gt;x=4,x=3&lt;/li&gt;
  &lt;li&gt;x=1,x=2&lt;/li&gt;
  &lt;li&gt;x=5,x=4&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As we can see, this is only a subset of the possible &lt;code&gt;Machine&lt;/code&gt; steps of the specification. In other words, by modifying the &lt;code&gt;World&lt;/code&gt; action to &lt;code&gt;x' \in (TotalWorld \ Goal)&lt;/code&gt;, the &lt;code&gt;FiniteWorldStable&lt;/code&gt; property &lt;em&gt;only&lt;/em&gt; asserts that &lt;code&gt;Spec&lt;/code&gt; is guaranteed to reach a &lt;code&gt;Goal&lt;/code&gt; state if it already is in a &lt;code&gt;Goal&lt;/code&gt; state (A,B,C) or "on the brink" of it (D,E). The property still does not assert that - given no &lt;code&gt;World&lt;/code&gt; steps from some point forward - &lt;code&gt;Spec&lt;/code&gt; will eventually converge to stability when starting from &lt;em&gt;any&lt;/em&gt; state in &lt;code&gt;TotalInterval&lt;/code&gt;. If we for example are in a state &lt;code&gt;x=6&lt;/code&gt;, the property &lt;code&gt;FiniteWorldStable&lt;/code&gt; does not assert that the &lt;code&gt;Machine&lt;/code&gt; will converge (we just happen to know it will because this is a toy example).&lt;/p&gt;
&lt;p&gt;To make this more explicit, we will temporarily introduce a "bug" in our specification by changing the &lt;code&gt;Machine&lt;/code&gt; action to not converge to a stable state if the value of the variable &lt;code&gt;x&lt;/code&gt; is greater than 6 (the upper bound &lt;code&gt;x &amp;lt; 10&lt;/code&gt; prevents the model from being infinite).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ChangeX&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt;
   &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="k k-Conditional"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="k k-Conditional"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k k-Conditional"&gt;ELSE&lt;/span&gt; 
                               &lt;span class="k k-Conditional"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="k k-Conditional"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; 
                               &lt;span class="k k-Conditional"&gt;ELSE&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The property &lt;code&gt;FiniteWorldStable&lt;/code&gt; still holds. Our "programming bug" above will go unnoticed!&lt;/p&gt;
&lt;p&gt;One might also try and remove &lt;code&gt;Machine&lt;/code&gt; from the next-state relation to show that &lt;code&gt;FiniteWorldState&lt;/code&gt; does not reveal violations even with the &lt;code&gt;TotalInteval \ Goal&lt;/code&gt; modification. After all, if no &lt;code&gt;Machine&lt;/code&gt; steps are possible and &lt;code&gt;World&lt;/code&gt; no longer gets us into a stable state, &lt;code&gt;FiniteWorldState&lt;/code&gt; should be violated. This however does not work for reasons beyond what this post can cover (Lamport calls this a "weird spec").&lt;/p&gt;
&lt;h2&gt;Another fix?&lt;/h2&gt;
&lt;p&gt;In &lt;a href="https://arxiv.org/abs/1703.05121"&gt;"Auxiliary Variables in TLA+" (section 3.4)&lt;/a&gt; Lamport and &lt;a href="https://members.loria.fr/SMerz/"&gt;Merz&lt;/a&gt; discuss how &lt;em&gt;history variables&lt;/em&gt; serve as a "helper" to state properties that we want to show are satisfied by a spec. While being primarily used in the scope of &lt;a href="https://lamport.azurewebsites.net/video/video10b.html"&gt;refinement mappings&lt;/a&gt;, "misusing" an auxiliary (history) variable will help us distinguish &lt;code&gt;World&lt;/code&gt; from &lt;code&gt;Machine&lt;/code&gt; steps. For &lt;code&gt;Spec&lt;/code&gt; we simply amend the invariant &lt;code&gt;TypeInvariant&lt;/code&gt;, the &lt;em&gt;state predicate&lt;/em&gt; &lt;code&gt;Init&lt;/code&gt; and the  two &lt;code&gt;World&lt;/code&gt; and &lt;code&gt;Machine&lt;/code&gt; actions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;VARIABLES&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;

&lt;span class="n"&gt;TypeInvariant&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Machine&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="k k-Conditional"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="k k-Conditional"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; = x + 1 ELSE x&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;m&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;World&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; 
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;TotalInterval&lt;/span&gt;
  &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this modification e.g. one behavior allowed by &lt;code&gt;Spec&lt;/code&gt; will be &lt;code&gt;&amp;lt;x=7,h="i"&amp;gt;, &amp;lt;x=6,h="m"&amp;gt;, &amp;lt;x=0,h="w"&amp;gt;, &amp;lt;x=1,h="m"&amp;gt;, &amp;lt;x=0,h="w"&amp;gt;, ...&lt;/code&gt; where &lt;code&gt;....&lt;/code&gt; represents infinite more steps. The first step of the behavior has to be an &lt;code&gt;Init&lt;/code&gt; step because &lt;code&gt;&amp;lt;x=7,h="i"&amp;gt;[[Init]]&amp;lt;x=6,h="m"&amp;gt;&lt;/code&gt; equals true and false for &lt;code&gt;World&lt;/code&gt; and &lt;code&gt;Machine&lt;/code&gt;. Likewise the pair &lt;code&gt;&amp;lt;x=0,h="m"&amp;gt;, &amp;lt;x=1,h="m"&amp;gt;&lt;/code&gt; is a &lt;code&gt;Machine&lt;/code&gt; and not a &lt;code&gt;World&lt;/code&gt; step and so on. With this change in place &lt;code&gt;FiniteWorldStable&lt;/code&gt; and &lt;code&gt;RareWorldResilient&lt;/code&gt; finally assert what is stated in their comments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FiniteWorldStable&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; \in TotalInterval /\ h&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Stable&lt;/span&gt;

&lt;span class="n"&gt;RareWorldResilient&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[][(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; \in TotalInterval /\ h&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Safe&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Resilient&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Having learned from past mistakes, we now experiment with the properties by e.g. negating the antecedent and/or the consequent to gain some confidence in their correctness.&lt;/p&gt;
&lt;p&gt;In general a history variables comes with an increase in the size of the state space. For the given spec the introduction of the history variable &lt;code&gt;h&lt;/code&gt; almost triples the size from 11 to 31 (distinct) states. While this is not a problem here, it can be for real-world specs. Since we are checking liveness properties, we are barred from using the &lt;a href="https://tla.msr-inria.inria.fr/tlatoolbox/doc/model/model-values.html#symmetry"&gt;symmetry reduction&lt;/a&gt; technique; liveness checking and symmetry reduction are - &lt;a href="https://github.com/tlaplus/tlaplus/blob/master/general/docs/contributions.md#liveness-checking-under-symmetry-difficulty-high-skills-java-tla"&gt;for now&lt;/a&gt; - incompatible (TLC and the Toolbox will emit a warning if we try this)[^2].&lt;/p&gt;
&lt;p&gt;One might also argue that the introduction of a history variable has a second undesired consequence: How can we possibly expect an adversary to be so nice and properly "mark" his steps? Instead of assuming the adversary to mark steps, we can instead consider the history variable to represent &lt;a href="https://en.wikipedia.org/wiki/Message_authentication_code"&gt;message authentication codes&lt;/a&gt; i.e. &lt;code&gt;Machine&lt;/code&gt; "messages" include an (unforgeable) signature (modeled above as &lt;code&gt;"m"&lt;/code&gt;). We will stop here and ignore this problem because I wanted to constrain this post to leave the original properties untouched. The goal was to make the properties assert what the comments says. We might revisit modeling adversaries in a &lt;a href="https://lemmster.de/feeds/tla.atom"&gt;future post&lt;/a&gt; though to discuss alternative ways to state the properties. &lt;/p&gt;
&lt;p&gt;The primary purpose of this post is to remind us of two things: First, we should always be suspicious of success! "&lt;a href="https://groups.google.com/d/msg/tlaplus/ox2AI3VqPbw/v7RIK4pQBQAJ"&gt;&lt;em&gt;Model checking [...] is most informative when it returns a counter-example, not when it says that the property holds, which may be vacuous&lt;/em&gt;&lt;/a&gt;". Second, decomposing a next-state relation into (sub) actions makes a spec more comprehensible for a human. It however does not give us a higher-level concept to reason about. Or as Lamport puts it: "&lt;a href="https://lamport.azurewebsites.net/pubs/lamport-eye-of-beholder.ps"&gt;Processes are in the eye of the beholder&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;We end this post with a little puzzler: What hack does the linked BlockingQueue spec below (&lt;a href="https://gist.github.com/lemmy/5cae084db688c06fbcb5faaa2f630dec"&gt;gist with better syntax highlighting&lt;/a&gt;) "pull" to make the &lt;code&gt;NoPStarvation&lt;/code&gt; property reveal that the spec does not guarantee &lt;a href="https://en.wikipedia.org/wiki/Starvation_(computer_science)"&gt;starvation-freedom&lt;/a&gt; for &lt;em&gt;producers&lt;/em&gt;? Why doesn't the same hack work for &lt;em&gt;consumers&lt;/em&gt;, i.e. &lt;code&gt;NoCStarvation&lt;/code&gt; is not violated? &lt;a href="https://twitter.com/lemmster"&gt;Let me know&lt;/a&gt; what you find.&lt;/p&gt;
&lt;p&gt;Thanks to Leslie Lamport and &lt;a href="https://pron.github.io/"&gt;Ron Pressler&lt;/a&gt; for reviews of this post.&lt;/p&gt;
&lt;p&gt;([^1]: The &lt;em&gt;-continue&lt;/em&gt; parameter is &lt;a href="https://github.com/tlaplus/tlaplus/issues/79"&gt;not yet supported&lt;/a&gt; by the TLA Toolbox.)&lt;/p&gt;
&lt;p&gt;([^2]: What does work for this spec is to use a &lt;em&gt;view&lt;/em&gt; function &lt;code&gt;&amp;lt;&amp;lt;x&amp;gt;&amp;gt;&lt;/code&gt; to retain the original size of the state space even with a history variable. This is however due to the particular shape of the state space and does not generalize. A &lt;em&gt;view&lt;/em&gt; is great to shoot yourself in the foot!)&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c c-PreProc"&gt;---------------------------&lt;/span&gt; &lt;span class="c c-PreProc"&gt;MODULE&lt;/span&gt; &lt;span class="c c-PreProc"&gt;BlockingQueueBlog&lt;/span&gt; &lt;span class="c c-PreProc"&gt;---------------------------&lt;/span&gt;
&lt;span class="kn"&gt;EXTENDS&lt;/span&gt; &lt;span class="n"&gt;Naturals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FiniteSets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TLC&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;   &lt;span class="c"&gt;\* Two consumers and producers...&lt;/span&gt;
&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;   &lt;span class="c"&gt;\* ...which are usually better model as sets of model values.&lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="c"&gt;\* Fix queue size to 1 element&lt;/span&gt;

&lt;span class="c"&gt;\* We assume the following properties even though the spec doesn&amp;#39;t use CONSTANTS.&lt;/span&gt;
&lt;span class="n"&gt;ASSUME&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;IsFiniteSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;IsFiniteSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;\* Finite sets&lt;/span&gt;
       &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="nb"&gt;\intersect&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="ni"&gt;{}&lt;/span&gt;              &lt;span class="c"&gt;\* A producer is no consumer and vice versa&lt;/span&gt;
&lt;span class="n"&gt;ASSUME&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nat&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;\* K is a natural number without zero&lt;/span&gt;

&lt;span class="o"&gt;------------------------------------------------------------------&lt;/span&gt;

&lt;span class="c"&gt;\* Nondeterministically notify (wake) a process from the given waitset.&lt;/span&gt;
&lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="k k-Conditional"&gt;IF&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="ni"&gt;{}&lt;/span&gt;
             &lt;span class="k k-Conditional"&gt;THEN&lt;/span&gt; &lt;span class="s"&gt;\E&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;
             &lt;span class="k k-Conditional"&gt;ELSE&lt;/span&gt; &lt;span class="n"&gt;UNCHANGED&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;------------------------------------------------------------------&lt;/span&gt;

&lt;span class="kn"&gt;VARIABLES&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;\* The (internal) storage for the queue&lt;/span&gt;
          &lt;span class="n"&gt;waitP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;\* A waitset for producers&lt;/span&gt;
          &lt;span class="n"&gt;waitC&lt;/span&gt;  &lt;span class="c"&gt;\* A waitset for consumers&lt;/span&gt;
&lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;\* A type correctness invariant asserting that...&lt;/span&gt;
&lt;span class="n"&gt;TypeOK&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="nb"&gt;\subseteq&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="c"&gt;\* only producers are in waitP&lt;/span&gt;
          &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="nb"&gt;\subseteq&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c"&gt;\* only consumers are in waitC&lt;/span&gt;
          &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;DOMAIN&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="nb"&gt;\subseteq&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="c"&gt;\* store is a sequence for which the &lt;/span&gt;
                                         &lt;span class="c"&gt;\* elements of the codomain are undefined.&lt;/span&gt;

&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="cm"&gt;(* Initially consumers and processes are alive and the queue is empty.     *)&lt;/span&gt;
&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="ni"&gt;{}&lt;/span&gt;
        &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="ni"&gt;{}&lt;/span&gt;

&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="cm"&gt;(* A producer either waits if the queue is full or appends an element.     *)&lt;/span&gt;
&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="nb"&gt;\cup&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;UNCHANGED&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waitC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;UNCHANGED&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="cm"&gt;(* A consumer either waits if the queue is empty (c1) or picks one element *)&lt;/span&gt;
&lt;span class="cm"&gt;(* (c2). c2 is the critical section from the perspective of the consumer.  *)&lt;/span&gt;
&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="nb"&gt;\cup&lt;/span&gt; &lt;span class="ni"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="ni"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;UNCHANGED&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waitP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ni"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;UNCHANGED&lt;/span&gt; &lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt; &lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="cm"&gt;(* Let the scheduler non-deterministically schedule consumer and           *)&lt;/span&gt;
&lt;span class="cm"&gt;(* producers processes.                                                    *)&lt;/span&gt;
&lt;span class="cm"&gt;(*                                                                         *)&lt;/span&gt;
&lt;span class="cm"&gt;(* Correct Next to not schedule waiting processes. Thanks to Hillel for    *)&lt;/span&gt;
&lt;span class="cm"&gt;(* making me aware of this issue.                                          *)&lt;/span&gt;
&lt;span class="cm"&gt;(***************************************************************************)&lt;/span&gt;
&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="o"&gt;\/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;\E&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="n"&gt;waitP&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;\/&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;\/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;\E&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;\/&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;Spec&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_vars&lt;/span&gt; &lt;span class="o"&gt;/\&lt;/span&gt; &lt;span class="n"&gt;WF_vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;THEOREM&lt;/span&gt; &lt;span class="n"&gt;Spec&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;TypeOK&lt;/span&gt;

&lt;span class="o"&gt;------------------------------------------------------------------&lt;/span&gt;

&lt;span class="c"&gt;\* Not all consumers and producers wait at once.&lt;/span&gt;
&lt;span class="n"&gt;NoDeadLock&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waitP&lt;/span&gt; &lt;span class="nb"&gt;\cup&lt;/span&gt; &lt;span class="n"&gt;waitC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="nb"&gt;\cup&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;THEOREM&lt;/span&gt; &lt;span class="n"&gt;Spec&lt;/span&gt; &lt;span class="ni"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;NoDeadLock&lt;/span&gt;

&lt;span class="c"&gt;\* All consumers eventually dequeue elements.&lt;/span&gt;
&lt;span class="n"&gt;NoCStarvation&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="s"&gt;\A&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;\* All producers eventually enqueue elements.&lt;/span&gt;
&lt;span class="n"&gt;NoPStarvation&lt;/span&gt; &lt;span class="ni"&gt;==&lt;/span&gt; &lt;span class="s"&gt;\A&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="s"&gt;\in&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="ni"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="ni"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c c-PreProc"&gt;=============================================================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Include TLA+ in LyX documents and export it pretty-printed to PDF</title><link href="http://www.lemmster.de/tla-in-lyx.html" rel="alternate"></link><published>2016-08-15T09:43:02+02:00</published><updated>2016-08-15T09:43:02+02:00</updated><author><name>Markus A. Kuppe</name></author><id>tag:www.lemmster.de,2016-08-15:/tla-in-lyx.html</id><summary type="html">&lt;p&gt;Create a wrapper script for tla2tex.TeX (part of tlatools), put it onto $PATH and name it tla2tex.sh:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;INPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="c1"&gt;## Creating dummy file ${OUTPUT%.*}.tex for …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;Create a wrapper script for tla2tex.TeX (part of tlatools), put it onto $PATH and name it tla2tex.sh:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;INPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="c1"&gt;## Creating dummy file ${OUTPUT%.*}.tex for tla2tex to remove. It apparently needs this.&lt;/span&gt;
touch &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tex

&lt;span class="c1"&gt;## Running tla2tex.TeX on $INPUT and writing output to ${OUTPUT%.*}.tex. Expects the TLA+Toolbox to&lt;/span&gt;
&lt;span class="c1"&gt;## be installed to /opt/TLA+Toolbox&lt;/span&gt;
java -cp /opt/TLA+Toolbox/plugins/org.lamport.tlatools_1.0.0.*/ tla2tex.TeX -out &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tex &lt;span class="nv"&gt;$INPUT&lt;/span&gt;

&lt;span class="c1"&gt;## Converting ${OUTPUT%.*}.tex back to $OUTPUT for LyX to read it&lt;/span&gt;
&lt;span class="c1"&gt;#cp ${OUTPUT%.*}.tex $OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;## tla2tex.TeX does not accept &amp;quot;\label{...}&amp;quot; as a lexem and fails. To still be able to use \label&lt;/span&gt;
&lt;span class="c1"&gt;## within algorithms, they get wrapped into a TLA+ line comment (&amp;quot;\*...&amp;quot;). Despite being an empty&lt;/span&gt;
&lt;span class="c1"&gt;## comment, the resulting PDF shows a grayish box for each \label iff comment shading is enabled.&lt;/span&gt;
&lt;span class="c1"&gt;## The regexp below removes all boxes created by TLA+ line comments with \label{...}.&lt;/span&gt;
cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tex &lt;span class="p"&gt;|&lt;/span&gt;perl -0777 -pe &lt;span class="s1"&gt;&amp;#39;s/\\\@y\{%\n (\\label\{[:a-zA-Z0-9]+})\n}%/$1/igs&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Open up LyX and create two new "File Formats" under Tools &amp;gt; Preferences &amp;gt; File Handling &amp;gt; File Formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LaTeX&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tla2tex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tla2tex&lt;/span&gt;
&lt;span class="n"&gt;Extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tex&lt;/span&gt;

&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PDF&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tla2tex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Document format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Show in export menu&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Vector graphics format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pdf4tla2tex&lt;/span&gt;
&lt;span class="n"&gt;Extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;
&lt;span class="n"&gt;Shortcut&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;Viewer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;qpdfview&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also create two new LyX "Converters" under Tools &amp;gt; Preferences &amp;gt; File Handling &amp;gt; Converters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;From/To: LaTeX (plain) -&amp;gt; LaTeX (tla2tex)
Converter: tla2tex.sh $$o $$i

From/To: LaTeX (tla2tex) -&amp;gt; PDF (tla2tex)
Converter: pdflatex $$i
Extra flag: latex=pdflatex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Afterwards run Tools &amp;gt; reconfigure and restart LyX. TLA+ statements can then be included in LyX documents
inside LyX's &lt;a href="https://wiki.lyx.org/FAQ/ERT"&gt;&lt;img alt="\ERT" src="https://wiki.lyx.org/FAQ/ERT"&gt;&lt;/a&gt; within a "tla" or "pcal"
environment provided the document's LaTeX preamble declares a \usepackage{tlatex} as explained in the 
&lt;a href="https://github.com/tlaplus/tlaplus/blob/master/tlatools/src/tla2tex/texinfo.txt"&gt;&lt;img alt="tla2tex help" src="https://github.com/tlaplus/tlaplus/blob/master/tlatools/src/tla2tex/texinfo.txt"&gt;&lt;/a&gt; and be exported via File &amp;gt; Export &amp;gt; PDF (tla2tex):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{tla}
(***********************************************)
(* A standard definition of spec.              *)
(***********************************************)
Spec == Init /\ [][Next]_vars /\ WF_vars(Next)
\end{tla}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ideally, the excerpts were sourced from the .tla file directly so that one wouldn't need to copy&amp;amp;paste
parts of a specification into the .tex document. Someone might want to look into This. The &lt;a href="https://www.ctan.org/pkg/catchfilebetweentags"&gt;&lt;img alt="catchfilebetweentags" src="https://www.ctan.org/pkg/catchfilebetweentags"&gt;&lt;/a&gt; packages seems to be a viable candidate.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;An incompatibility with the algorithm2e package surfaced that screws up \ref pointing to a \label whichis attached to a section/subsection.
If secnumdepth is set to be lower than the label'ed section/subsection, the \ref fails to show the number of the parent secton if
interleaved with a TLA+/PlusCal algorithm. Instead, it shows the last line number of the interleaved algorithm. If anybody cares
about it, the .tex below reproduces it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;\batchmode&lt;/span&gt;
&lt;span class="x"&gt;\makeatletter&lt;/span&gt;
&lt;span class="x"&gt;\def\input@path&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;foobar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;\makeatother&lt;/span&gt;
&lt;span class="x"&gt;\documentclass[english]{scrreprt}&lt;/span&gt;
&lt;span class="x"&gt;\usepackage[T1]{fontenc}&lt;/span&gt;
&lt;span class="x"&gt;\usepackage[utf8]{inputenc}&lt;/span&gt;
&lt;span class="x"&gt;\setcounter{secnumdepth}{1}&lt;/span&gt;
&lt;span class="x"&gt;\setcounter{tocdepth}{1}&lt;/span&gt;
&lt;span class="x"&gt;\usepackage{algorithm2e}&lt;/span&gt;

&lt;span class="x"&gt;\makeatletter&lt;/span&gt;
&lt;span class="x"&gt;\usepackage{tlatex}&lt;/span&gt;
&lt;span class="x"&gt;\RestyleAlgo{ruled}&lt;/span&gt;
&lt;span class="x"&gt;\LinesNumbered&lt;/span&gt;

&lt;span class="x"&gt;\makeatother&lt;/span&gt;

&lt;span class="x"&gt;\usepackage{babel}&lt;/span&gt;
&lt;span class="x"&gt;\begin{document}&lt;/span&gt;

&lt;span class="x"&gt;\chapter{Chap}&lt;/span&gt;

&lt;span class="x"&gt;\section{Sec}&lt;/span&gt;

&lt;span class="x"&gt;\begin{algorithm}&lt;/span&gt;
&lt;span class="x"&gt;\begin{tla}&lt;/span&gt;
&lt;span class="x"&gt;Line&lt;/span&gt;
&lt;span class="x"&gt;Line&lt;/span&gt;
&lt;span class="x"&gt;Line&lt;/span&gt;
&lt;span class="x"&gt;\end{tla}&lt;/span&gt;
&lt;span class="x"&gt;\begin{tlatex}&lt;/span&gt;
&lt;span class="x"&gt;\@x{ Line}%&lt;/span&gt;
&lt;span class="x"&gt;\@x{ Line}%&lt;/span&gt;
&lt;span class="x"&gt;\@x{ Line}%&lt;/span&gt;
&lt;span class="x"&gt;\end{tlatex}&lt;/span&gt;
&lt;span class="x"&gt;\centering{}\caption{caption}&lt;/span&gt;
&lt;span class="x"&gt;\end{algorithm}&lt;/span&gt;


&lt;span class="x"&gt;\subsection{Subsec\label{subsec:subsection}}&lt;/span&gt;

&lt;span class="x"&gt;\chapter{Broken Ref Below}&lt;/span&gt;

&lt;span class="x"&gt;\ref{subsec:subsection} &amp;lt;= incorrectly shows last line number of&lt;/span&gt;
&lt;span class="x"&gt;algorithm instead of ``1.1&amp;#39;&amp;#39;.&lt;/span&gt;
&lt;span class="x"&gt;\begin{itemize}&lt;/span&gt;
&lt;span class="x"&gt;\item If line numbers are omitted (no \textbackslash{}LinesNumbered in Preamble),&lt;/span&gt;
&lt;span class="x"&gt;the bug disappears.&lt;/span&gt;
&lt;span class="x"&gt;\item If secnumdepth includes subsections, the bug disappears.&lt;/span&gt;
&lt;span class="x"&gt;\end{itemize}&lt;/span&gt;

&lt;span class="x"&gt;\end{document}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>